
<!-- You may set style: "width: ...; height: ..." to size the chart -->
<div id="graph-container">
<div id='graph'><!-- Plotly chart will be drawn inside this DIV --></div>
</div>


<script>

  //get target
  var targetDevice = document.getElementsByName('targetDevice')[0].content;
  console.log(targetDevice)
      //request target data
  socket.emit('device-history-request', {targetUID: targetDevice });

  //recieve data and parse
  // socket.on('device-history-response', (data)=>{
  //   console.log(data)
  //
  //   chartSet = {
  //     x: [],
  //     y : [],
  //     type: 'scatter',
  //     name: device.id,
  //     mode: 'lines',
  //      line: {
  //        color: device.doc.color,
  //        width: 2.3,
  //        shape: 'linear'
  //      }
  //   }
  // })



 // id="allDataChartJS"  hardwareBank = input.hardwareBank
// var script_tag = document.getElementById('allDataChartJS')
// var hardwareBank = script_tag.getAttribute("hardwareBank");
// console.log(hardwareBank)

 // socket.emit('device-history-request', {target: 'Light', recordCount: 10});
 //
 // socket.on('device-history-response', (data)=>{
 //   console.log(data);
 //    var dataArray = data.dataBundle
 //    dataArray.forEach((data) => {
 //      console.log(data)
 //      sensor1.y.push(data.data)
 //      sensor1.x.push(data.eventTriggerDate)
 //    });
 //
 //    console.log(sensor1);
 //   //0: {data: "ON", eventTriggerDate: "3/13/2020, 12:33:32 AM", status: "normal", detail: "event trigger by cron morning_fans"}
 //
 //  })


 //socket.emit('device-history-request', {targetUID: 'ALL'});

 // when you get response
 socket.on('device-history-response', (data)=>{
    // console.log(data);

    dataArray = [data] // create array for resuability

    //create global variable of dataset so other systems can run math
    window.targetUIDDBDoc = data;


    chartData = []

    //for each item in the data array response
    dataArray.forEach((device, i) => {
      //current target device id
      //console.log(device);

      chartSet = {
        x: [],
        y : [],
        type: 'scatter',
        name: device.id,
        mode: 'lines',
         line: {
           color: device.doc.color,
           width: 2.3,
           shape: 'linear'
         }
      }


      let x = chartSet.x
      let y = chartSet.y

      // console.log(device.doc.data);
      dataSet = device.doc.data

      // for each data bundle in the bundle
      dataSet.forEach((dataBundle, i) => {
        y.push(dataBundle.data)
        x.push(dataBundle.eventTriggerDate)
      });

      //console.log(chartSet)
      return chartData.push(chartSet);
    });



    //function get length of the dataset
    testDataSetLength = () => {
      testDataSet = chartData[0].x
      return testDataSet.length
    }

   //console.log(testDataSetLength()); //report datasetlength


    //get upper range of dates
    getDateUpperRange = (lengthOfDataSet) => {
      testDataSet = chartData[0].x
      arrayOffSet = lengthOfDataSet-1
      return testDataSet[arrayOffSet]
    }


    // get lowest range of dates
    getDateLowerRange = () => {
      testDataSet = chartData[0].x
      return testDataSet[0]
    }



    var config = {responsive: true};
    var layout = {
      margin: {t:5,r:5,b:10,l:33},
      xaxis: {
       tickangle: 90,

        rangeselector: {buttons: [
          {
            count: 12,
            label: '12h',
            step: 'hour',
            stepmode: 'backward'
          },
            {
              count: 1,
              label: '24h',
              step: 'day',
              stepmode: 'backward'
            },
            {
              count: 3,
              label: '72h',
              step: 'day',
              stepmode: 'backward'
            },
            {
              count: 1,
              label: '1m',
              step: 'month',
              stepmode: 'backward'
            },
            {
              count: 6,
              label: '6m',
              step: 'month',
              stepmode: 'backward'
            },
            {step: 'all'}
          ]},
        rangeslider: {range: [getDateLowerRange(), getDateUpperRange(testDataSetLength())]},
     },
     yaxis: {
      tickangle: 90,
     },
      legend: {
        x: 1,
        y: 0.5
      },
      autosize: true,
      paper_bgcolor :'rgba(0,0,0,0)',
      plot_bgcolor : 'rgba(0,0,0,0)',
    };

    Plotly.newPlot('graph', chartData, layout, config);


    // console.log(chartData);

})




  setTimeout(function () {
    var evt = document.createEvent('UIEvents');
    evt.initUIEvent('resize', true, false,window,0);
    window.dispatchEvent(evt);
  }, 0);

</script>
