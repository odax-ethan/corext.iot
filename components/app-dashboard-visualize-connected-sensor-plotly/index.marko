<!-- You may set style: "width: ...; height: ..." to size the chart -->
<div id="graph-container">
  <div id="graph">
    <!-- Plotly chart will be drawn inside this DIV -->
  </div>
</div>
<script>
// //  socket.emit('device-history-request', {
//     targetUID: 'ALL'
//   });
//
//   // when you get response
//   //socket.on('device-history-response', (data) => {
//     // console.log(data);
//
//     chartData = []
//
//     //for each item in the data array response
//     data.forEach((device, i) => {
//       //current target device id
//       //console.log(device);
//
//       plotlyTraceOBJ = {
//         x: [],
//         y: [],
//         type: 'scatter',
//         name: device.id,
//         mode: 'lines',
//         line: {
//           color: device.doc.color,
//           width: 2.3,
//           shape: 'linear'
//         }
//       }
//
//
//       let x = plotlyTraceOBJ.x
//       let y = plotlyTraceOBJ.y
//
//       // console.log(device.doc.data);
//       dataSet = device.doc.data
//
//       // for each data bundle in the bundle
//       dataSet.forEach((dataBundle, i) => {
//         y.push(dataBundle.data)
//         x.push(dataBundle.eventTriggerDate)
//       });
//
//       // console.log(plotlyTraceOBJ)
//       return chartData.push(plotlyTraceOBJ);
//     });
//
//     //function get length of the dataset
//     testDataSetLength = () => {
//       testDataSet = chartData[0].x
//       return testDataSet.length
//     }
//
//
//     //get upper range of dates
//     getDateUpperRange = (lengthOfDataSet) => {
//       testDataSet = chartData[0].x
//       arrayOffSet = lengthOfDataSet - 1
//       return testDataSet[arrayOffSet]
//     }
//
//
//     // get lowest range of dates
//     getDateLowerRange = () => {
//       testDataSet = chartData[0].x
//       return testDataSet[0]
//     }
//
//
//
//     var config = {
//       responsive: true
//     };
//     var layout = {
//       margin: {
//         t: 5,
//         r: 5,
//         b: 10,
//         l: 33
//       },
//       xaxis: {
//         tickangle: 90,
//
//         rangeselector: {
//           buttons: [{
//               count: 12,
//               label: '12h',
//               step: 'hour',
//               stepmode: 'backward'
//             },
//             {
//               count: 1,
//               label: '24h',
//               step: 'day',
//               stepmode: 'backward'
//             },
//             {
//               count: 3,
//               label: '72h',
//               step: 'day',
//               stepmode: 'backward'
//             },
//             {
//               count: 1,
//               label: '1m',
//               step: 'month',
//               stepmode: 'backward'
//             },
//             {
//               count: 6,
//               label: '6m',
//               step: 'month',
//               stepmode: 'backward'
//             },
//             {
//               step: 'all'
//             }
//           ]
//         },
//         rangeslider: {
//           range: [getDateLowerRange(), getDateUpperRange(testDataSetLength())]
//         },
//       },
//       yaxis: {
//         tickangle: 90,
//       },
//       legend: {
//         x: 1,
//         y: 0.5
//       },
//       autosize: true,
//       paper_bgcolor: 'rgba(0,0,0,0)',
//       plot_bgcolor: 'rgba(0,0,0,0)',
//     };
//
//     Plotly.newPlot('graph', chartData, layout, config);
//
//
//     // console.log(chartData);
//   })
//





  // get all event data and history
  socket.emit('chart-completeHistory-request', '');


  //calculate and place graph from complete history
  socket.on('chart-completeHistory-response', (res) => {


            // show response
            // console.log(res[0]);

            //event history
            let eventHistoryPrebundle = res[1];

            //device history
            let deviceHistoryPrebundle = res[0];
            console.log(deviceHistoryPrebundle);


            //create a promise to get data async from device data base
            const formDeviceDataBundlePromise = new Promise((resolve, reject) => {

                //create function to handle unbundling and bundling object for plotly
                generateDeviceHistoryChartBundle = ()  => {

                  let chartDataBundle = []

                  deviceHistoryPrebundle.forEach((device, i) => {
                    //current target device id
                    //console.log(device);

                    plotlyTraceOBJ = {
                      x: [],
                      y: [],
                      type: 'scatter',
                      name: device.id,
                      mode: 'lines',
                      line: {
                        color: device.doc.color,
                        width: 2.3,
                        shape: 'linear'
                      }
                    }


                    let x = plotlyTraceOBJ.x
                    let y = plotlyTraceOBJ.y

                    // console.log(device.doc.data);
                    dataSet = device.doc.data

                    // for each data bundle in the bundle
                    dataSet.forEach((dataBundle, i) => {
                      y.push(dataBundle.data)
                      x.push(dataBundle.eventTriggerDate)
                    });

                    // console.log(plotlyTraceOBJ)
                    return chartDataBundle.push(plotlyTraceOBJ);
                  });

                  return chartDataBundle
                }

                //resolve said function and send output to next step
                resolve(generateDeviceHistoryChartBundle())

            });

            //create a promise to get data async from event data base
            const formEventDataBundlePromise = new Promise((resolve, reject) => {

                      // number of history values to display
                      var lengthValue = 1000;

                      // simple place
                      // let pre = document.getElementById('output');
                      // let jstring = JSON.stringify(data, null, 4);
                      // pre.textContent = jstring;

                      // get data from dataBundle
                      let eventHistoryTargetBundle = eventHistoryPrebundle.slice(1).slice(-lengthValue)
                      let postBundle = []

                      //plotly trace object
                      plotlyTraceOBJ =  {
                         x: [], //event date
                         y: [],  // event placer
                         text: [], // the event info
                         name: 'Event History',
                         type: 'scatter',
                         mode: 'markers',
                         hoverinfo: 'text',
                         yaxis: 'y2',
                         marker: {
                          color: 'rgb(17, 157, 255)',
                          size: 5,
                          line: {
                            color: 'rgb(231, 99, 250)',
                            width: 1
                          }
                        }
                      };

                      x = plotlyTraceOBJ.x
                      y = plotlyTraceOBJ.y
                      text = plotlyTraceOBJ.text

                      for (var i = lengthValue - 1; i >= 0; i--) {
                        // postBundle.push(eventHistoryTargetBundle[i])
                        x.push( eventHistoryTargetBundle[i].eventTriggerDate)
                        y.push(50)
                        text.push(eventHistoryTargetBundle[i].detail)
                      }

                      // console.log(plotlyTraceOBJ)
                      resolve(plotlyTraceOBJ);
            });


            //check if promises have completed and send an array of results
            Promise.all([formDeviceDataBundlePromise, formEventDataBundlePromise]).then((data) => {
              // put datavalue into array
              // create chart
              //console.log(data);

              deviceHistoryPlotlyBundle = data[0] //assigned name to deviceBundle from promises
              eventsHistoryPlotlyBundle = data[1] //assigned name to eventBundle from promises
              chartData = []  //create masterDataSet for chart -> plotly dataset object

              //for each trace in device bundle place each into chart bundle
              deviceHistoryPlotlyBundle.forEach((deviceTrace, i) => {
                  return chartData.push(deviceTrace)
              });

              //If event history is more than 1 trace create system like the one for devices
              chartData.push(eventsHistoryPlotlyBundle) // put events traces in chart data




              ////////////////////////////// functions for chart //////////////


                  //function get length of the dataset
                  testDataSetLength = () => {
                    testDataSet = chartData[0].x
                    return testDataSet.length
                  }


                  //get upper range of dates
                  getDateUpperRange = (lengthOfDataSet) => {
                    testDataSet = chartData[0].x
                    arrayOffSet = lengthOfDataSet - 1
                    return testDataSet[arrayOffSet]
                  }


                  // get lowest range of dates
                  getDateLowerRange = () => {
                    testDataSet = chartData[0].x
                    return testDataSet[0]
                  }





              // define chart////////////////////////////////////////////////////




                var config = {responsive: true};
                var layout = {
                  margin: {t:5,r:5,b:10,l:33},
                  xaxis: {
                   tickangle: 90,
                    rangeselector: {buttons: [
                      {
                        count: 12,
                        label: '12h',
                        step: 'hour',
                        stepmode: 'backward'
                      },
                        {
                          count: 1,
                          label: '24h',
                          step: 'day',
                          stepmode: 'backward'
                        },
                        {
                          count: 3,
                          label: '72h',
                          step: 'day',
                          stepmode: 'backward'
                        },
                        {
                          count: 1,
                          label: '1m',
                          step: 'month',
                          stepmode: 'backward'
                        },
                        {
                          count: 6,
                          label: '6m',
                          step: 'month',
                          stepmode: 'backward'
                        },
                        {step: 'all'}
                      ]},
                    rangeslider: {range: [getDateLowerRange(), getDateUpperRange(testDataSetLength())]},
                 },
                 yaxis2: {
                    overlaying: 'y',
                    side: 'right',
                    showticklabels: false
                  },
                 yaxis: {
                  tickangle: 90,
                 },
                  legend: {
                    x: 1,
                    y: 0.5
                  },
                  autosize: true,
                  paper_bgcolor :'rgba(0,0,0,0)',
                  plot_bgcolor : 'rgba(0,0,0,0)',
                };


                //create chart in dom
                Plotly.newPlot('graph', chartData, layout, config);






            });




  })





  setTimeout(function() {
    var evt = document.createEvent('UIEvents');
    evt.initUIEvent('resize', true, false, window, 0);
    window.dispatchEvent(evt);
  }, 0);
</script>
