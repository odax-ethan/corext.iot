
<!-- You may set style: "width: ...; height: ..." to size the chart -->
<div id="graph-container">
<div id="graph"></div>
  <div>
  <b>Zoom:</b>
  <a href="#" id="hour">hour</a>
  <a href="#" id="day">day</a>
  <a href="#" id="week">week</a>
  <a href="#" id="month">month</a>
  <a href="#" id="full">full</a>
  <b>Pan:</b>
  <a href="#" id="left">left</a>
  <a href="#" id="right">right</a>

  </div>
</div>



<script>


 socket.emit('device-history-request', {target: 'Light', recordCount: 10});

 socket.on('device-history-response', (data)=>{
    console.log(data);

    dataBundle: Array(10)

    var dataArray = data.data
    dataArray.forEach((dataObj,index) => {

      var newArray = [dataObj.eventTriggerDate, dataObj.data]

    })


   //0: {data: "ON", eventTriggerDate: "3/13/2020, 12:33:32 AM", status: "normal", detail: "event trigger by cron morning_fans"}

  })


  // Specifying fields and data explicitly
  var csv = Papa.unparse({
    "fields": ["Date", "sensor1", "sensor2"],
    data: [
      ["20070101", "46", "43"],
      ["20070102", "99", "-50"],
      ["20070202", "99", "-50"],
      ["20070302", "99", "-50"],
      ["20070402", "99", "-50"]
    ],
  });

var target= document.getElementById("graph")

  g = new Dygraph(
    target,
    // For possible data formats, see http://dygraphs.com/data.html
    // The x-values could also be dates, e.g. "2012/03/15"
    csv, {
      // options go here. See http://dygraphs.com/options.html
      legend: 'always',
      animatedZooms: true
    });



  /* var orig_range = [ data[0][0].valueOf(), data[data.length - 1][0].valueOf() ]; */
  var desired_range = null,
    animate;

  function approach_range() {
    if (!desired_range) return;
    // go halfway there
    var range = g.xAxisRange();
    if (Math.abs(desired_range[0] - range[0]) < 60 &&
      Math.abs(desired_range[1] - range[1]) < 60) {
      g.updateOptions({
        dateWindow: desired_range
      });
      // (do not set another timeout.)
    } else {
      var new_range;
      new_range = [0.5 * (desired_range[0] + range[0]),
        0.5 * (desired_range[1] + range[1])
      ];
      g.updateOptions({
        dateWindow: new_range
      });
      animate();
    }
  }
  animate = function() {
    setTimeout(approach_range, 50);
  };

  var zoom = function(res) {
    var w = g.xAxisRange();
    desired_range = [w[0], w[0] + res * 1000];
    animate();
  };

  var reset = function() {
          desired_range = data[0];
          animate();
        };

  var pan = function(dir) {
    var w = g.xAxisRange();
    var scale = w[1] - w[0];
    var amount = scale * 0.25 * dir;
    desired_range = [w[0] + amount, w[1] + amount];
    animate();
  };

  document.getElementById('hour').onclick = function() {
    zoom(3600);
  };
  document.getElementById('day').onclick = function() {
    zoom(86400);
  };
  document.getElementById('week').onclick = function() {
    zoom(604800);
  };
  document.getElementById('month').onclick = function() {
    zoom(30 * 86400);
  };
  document.getElementById('full').onclick = function() {
     zoom(2 * 86400);
  };
  document.getElementById('left').onclick = function() {
    pan(-1);
  };
  document.getElementById('right').onclick = function() {
    pan(+1);
  };

  setTimeout(function () {
    var evt = document.createEvent('UIEvents');
    evt.initUIEvent('resize', true, false,window,0);
    window.dispatchEvent(evt);
  }, 0);

</script>
