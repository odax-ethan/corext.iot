// Compiled using marko@4.18.48 - DO NOT EDIT
"use strict";

var marko_template = module.exports = require("marko/src/html").t(__filename),
    marko_componentType = "/cortex.iot$0.0.40/components/app-settings-modal-device-adder/index.marko",
    marko_renderer = require("marko/src/runtime/components/renderer"),
    marko_attr = require("marko/src/runtime/html/helpers/attr"),
    helpers_escape_xml = require("marko/src/runtime/html/helpers/escape-xml"),
    marko_escapeXml = helpers_escape_xml.x;

function render(input, out, __component, component, state) {
  var data = input;

  out.w("<a" +
    marko_attr("id", ("targetBoard_" + input.targetBoard) + "_adder") +
    marko_attr("onclick", ("openDeviceAdder(\"" + input.targetBoard) + "\")") +
    "><i class=\"fas fa-plus-circle\"></i></a><div" +
    marko_attr("id", input.targetBoard + "_Modal_adder") +
    " class=\"modal\"><div class=\"modal-content\"><span" +
    marko_attr("id", input.targetBoard + "_Modal_adder_closer") +
    " class=\"close\">&times;</span><div id=\"deviceSettings_Adder\"><p" +
    marko_attr("id", "" + input.targetBoard) +
    "> Creating a device for the '" +
    marko_escapeXml(input.targetBoard) +
    "' board</p><span id=\"targetBoardID\">" +
    marko_escapeXml(input.targetBoard) +
    "</span> deviceName <input id=\"deviceID_\"> <br> devicePin <input id=\"devicePIN\"> <br> deviceColor <input id=\"deviceColor_Adder\" value=\"- Pick Color -\" data-huebee=\"{ &#34;notation&#34;: &#34;rgb&#34;, &#34;saturations&#34;: 2 }\"> <br> deviceType <select id=\"deviceTYPE_Adder\" onchange=\"getDeviceTypeInputs()\"><option value=\"NULL\">- Pick Type -</option><option value=\"Relay\">Relay</option><option value=\"Thermometer\">Thermometer</option></select><hr><div id=\"deviceOptionFields\"><span>-- Options --</span></div></div><button type=\"button\" onclick=\"sendNewDevice()\"> Set Device</button><button type=\"button\"> Cancel</button></div></div><script>\r\n\r\n  var targetBoard =  document.querySelector('div#deviceSettings_Adder span#targetBoardID').innerHTML;\r\n  var input = document.querySelectorAll('div#deviceSettings_Adder input'); // get the input element\r\n  var deviceOptionFields = document.querySelector('#deviceOptionFields') // target where options will be place\r\n  var deviceOptionFieldsSelector = document.querySelector('div#deviceSettings_Adder select#deviceTYPE_Adder ') // get actual selection\r\n\r\n  //function to size inputs to only space needed\r\n  function resizeInput() {\r\n    this.style.width = this.value.length + \"ch\";\r\n\r\n  }\r\n  //set resizing for inputss so they can drop in.\r\n  input.forEach((input) => {\r\n    input.addEventListener('input', resizeInput); // bind the \"resizeInput\" callback on \"input\" event\r\n    resizeInput.call(input); // immediately call the function\r\n\r\n  });\r\n\r\n  //on change of selection of device type update input fields\r\n  getDeviceTypeInputs = () => {\r\n\r\n    \t// deviceOptionFields.innerHTML = deviceOptionFieldsSelector.value\r\n\r\n   \t\tswitch(deviceOptionFieldsSelector.value) {\r\n        case 'Thermometer':\r\n\r\n             var inputBundle = `\r\n             \t\t  deviceController  <select id=\"device_controller_adder\">\r\n                      <option value=\"NULL\">- Pick Type -</option>\r\n                      <option value=\"LM35\">LM35</option>\r\n                      <option value=\"TMP36\">TMP36</option>\r\n                      <option value=\"TMP102\">TMP102</option>\r\n                      <option value=\"DS18B20 \">DS18B20 </option>\r\n                      <option value=\"MPU6050\">MPU6050</option>\r\n                      <option value=\"BMP180\">BMP180</option>\r\n                      <option value=\"BMP280\">BMP280</option>\r\n                      <option value=\"BME280\">BME280</option>\r\n                      <option value=\"MPL115A2\">MPL115A2</option>\r\n                      <option value=\"MPL3115A2\">MPL3115A2</option>\r\n                      <option value=\"HTU21D\">HTU21D</option>\r\n                      <option value=\"HIH6130\">HIH6130</option>\r\n                      <option value=\"MCP9808\">MCP9808</option>\r\n                      <option value=\"SI7020\">SI7020</option>\r\n                      <option value=\"SI7021\">SI7021</option>\r\n                      <option value=\"MS5611\">MS5611</option>\r\n                      <option value=\"DHT11\">DHT11</option>\r\n                      <option value=\"DHT21\">DHT21</option>\r\n                      <option value=\"DHT22\">DHT22</option>\r\n                      <option value=\"SHT31D\">SHT31D</option>\r\n                      <option value=\"LSM303C\">LSM303C</option>\r\n                  </select>\r\n             `\r\n\r\n             deviceOptionFields.innerHTML = inputBundle\r\n          break;\r\n        case 'Relay':\r\n             var inputBundle = `\r\n              RelayType  <select id=\"device_controller_adder\">\r\n              <option value=\"NULL\">- Pick Type -</option>\r\n              <option value=\"NC\">Normally Closed</option>\r\n              <option value=\"N0\">Normally Open</option>\r\n              </select>\r\n             `\r\n\r\n             deviceOptionFields.innerHTML = inputBundle\r\n          break;\r\n        case 'Button':\r\n          // code block\r\n          alert('hi3')\r\n          break;\r\n        default:\r\n          // code block\r\n          // Do nothing\r\n      }\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n// trigger open of modal\r\n  openDeviceAdder = (targetName) => {\r\n         // Get the modal\r\n         var modal = document.getElementById(targetName+`_Modal_adder`);\r\n\r\n         // Get the button that opens the modal\r\n         var btn = document.getElementById(\"targetBoard_\"+targetName+ \"_adder\");\r\n\r\n         // Get the <span> element that closes the modal\r\n         var span = document.getElementById(targetName + '_Modal_adder_closer');\r\n\r\n         // When the user clicks on the button, open the modal\r\n         //btn.onclick = function() {\r\n         //  modal.style.display = \"block\";\r\n         //}\r\n         modal.style.display = \"block\";\r\n\r\n         // When the user clicks on <span> (x), close the modal\r\n         span.onclick = function() {\r\n           modal.style.display = \"none\";\r\n         }\r\n\r\n         // When the user clicks anywhere outside of the modal, close it\r\n         window.onclick = function(event) {\r\n           if (event.target == modal) {\r\n             modal.style.display = \"none\";\r\n           }\r\n         }\r\n }\r\n\r\n\r\n sendNewDevice = () => {\r\n\r\n      var deviceID_Adder = input[0].value\r\n      var devicePIN_Adder = input[1].value\r\n      var deviceColor_Adder = input[2].value\r\n      var deviceTYPE_Adder = deviceOptionFieldsSelector.value\r\n      var deviceOptionFields_Controller = document.querySelector('#deviceOptionFields #device_controller_adder').value // target where options will be place\r\n\r\n      //var adderBundle = [devicePIN_Adder, devicePIN_Adder, deviceColor_Adder, deviceTYPE_Adder, deviceOptionFields_Controller]\r\n\r\n      switch (deviceTYPE_Adder) {\r\n        case 'Relay':\r\n            var newDeviceBundle = { deviceID: deviceID_Adder, deviceTYPE: deviceTYPE_Adder, devicePIN: devicePIN_Adder, deviceBOARDS: targetBoard, color: deviceColor_Adder, relayType: deviceOptionFields_Controller, cron: []}\r\n            //console.log(newDeviceBundle);\r\n            socket.emit('add-new-device', newDeviceBundle);\r\n          break;\r\n        case 'Thermometer':\r\n            var newDeviceBundle = { deviceID: deviceID_Adder, deviceTYPE: deviceTYPE_Adder, devicePIN: devicePIN_Adder, deviceBOARDS: targetBoard, color: deviceColor_Adder,  controller: deviceOptionFields_Controller}\r\n            //console.log(newDeviceBundle);\r\n            socket.emit('add-new-device', newDeviceBundle);\r\n          break;\r\n        default:\r\n          console.log('please finish settings options');\r\n      }\r\n\r\n\r\n      //console.log(newDeviceBundle)\r\n\r\n      //socket.emit('add-new-board', newBoardBundle);\r\n\r\n\r\n\r\n\r\n\r\n }\r\n\r\n\r\n\r\n\r\n\r\n</script>");
}

marko_template._ = marko_renderer(render, {
    ___implicit: true,
    ___type: marko_componentType
  });

marko_template.meta = {
    deps: [
      "./style.css"
    ],
    id: "/cortex.iot$0.0.40/components/app-settings-modal-device-adder/index.marko"
  };
